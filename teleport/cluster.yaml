apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
kind: KubeadmControlPlane
metadata:
  name: teleport-control-plane
  namespace: default
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: PacketMachineTemplate
    name: teleport-control-plane
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    joinConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
    postKubeadmCommands:
    - |
      cat <<EOF >> /etc/network/interfaces
      auto lo:0
      iface lo:0 inet static
        address {{ .controlPlaneEndpoint }}
        netmask 255.255.255.255
      EOF
    - systemctl restart networking
    - 'kubectl --kubeconfig /etc/kubernetes/admin.conf create secret generic -n kube-system packet-cloud-config --from-literal=cloud-sa.json=''{"apiKey": "{{ .apiKey }}","projectID": "7158c8a9-a55e-454e-a1aa-ce5f8937ed10", "eipTag": "cluster-api-provider-packet:cluster-id:teleport"}'''
    - kubectl apply --kubeconfig /etc/kubernetes/admin.conf -f https://github.com/packethost/packet-ccm/releases/download/v1.1.0/deployment.yaml
    preKubeadmCommands:
    - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
    - swapoff -a
    - mount -a
    - apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
    - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
    - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    - apt-key fingerprint 0EBFCD88
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    - apt-get update -y
    - TRIMMED_KUBERNETES_VERSION=$(echo v1.19.4 | sed 's/\./\./g' | sed 's/^v//')
    - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
    - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
    - systemctl daemon-reload
    - systemctl enable docker
    - systemctl start docker
    - ping -c 3 -q {{ .controlPlaneEndpoint }} && echo OK || ip addr add {{ .controlPlaneEndpoint }} dev lo
  replicas: 3
  version: v1.19.4
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketMachineTemplate
metadata:
  name: teleport-control-plane
  namespace: default
spec:
  template:
    spec:
      OS: ubuntu_20_04
      billingCycle: hourly
      machineType: c2.medium.x86
      sshKeys:
      - MBP16
      tags: []
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: Cluster
metadata:
  name: teleport
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
    services:
      cidrBlocks:
      - 172.26.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1alpha3
    kind: KubeadmControlPlane
    name: teleport-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
    kind: PacketCluster
    name: teleport
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketCluster
metadata:
  name: teleport
  namespace: default
spec:
  facility: ams1
  projectID: 7158c8a9-a55e-454e-a1aa-ce5f8937ed10
---
apiVersion: cluster.x-k8s.io/v1alpha3
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: teleport
    pool: worker-a
  name: teleport-worker-a
  namespace: default
spec:
  clusterName: teleport
  replicas: 3
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: teleport
      pool: worker-a
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: teleport
        pool: worker-a
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
          kind: KubeadmConfigTemplate
          name: teleport-worker-a
      clusterName: teleport
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
        kind: PacketMachineTemplate
        name: teleport-worker-a
      version: v1.19.4
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha3
kind: PacketMachineTemplate
metadata:
  name: teleport-worker-a
  namespace: default
spec:
  template:
    spec:
      OS: ubuntu_20_04
      billingCycle: hourly
      machineType: c2.medium.x86
      sshKeys:
      - MBP16
      tags: []
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha3
kind: KubeadmConfigTemplate
metadata:
  name: teleport-worker-a
  namespace: default
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: external
      preKubeadmCommands:
      - sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
      - swapoff -a
      - mount -a
      - apt-get -y update
      - DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https curl
      - curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
      - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      - apt-key fingerprint 0EBFCD88
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      - apt-get update -y
      - TRIMMED_KUBERNETES_VERSION=$(echo v1.19.4 | sed 's/\./\./g' | sed 's/^v//')
      - RESOLVED_KUBERNETES_VERSION=$(apt-cache policy kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$1~ VERSION { print $1 }' | head -n1)
      - apt-get install -y ca-certificates socat jq ebtables apt-transport-https cloud-utils prips docker-ce docker-ce-cli containerd.io kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
      - systemctl daemon-reload
      - systemctl enable docker
      - systemctl start docker
